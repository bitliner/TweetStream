{
  "name": "stream-wrapper",
  "version": "0.1.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/stream-wrapper.git"
  },
  "license": "MIT",
  "description": "Wrap read/write/transform functions into streams",
  "keywords": [
    "streams2",
    "stream",
    "wrap",
    "functional"
  ],
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "dependencies": {
    "readable-stream": "~1.0.15",
    "xtend": "~2.0.6"
  },
  "readme": "# stream-wrapper\n\nDrop-in replacement for the core [stream](http://nodejs.org/api/stream.html) module\nthat allows you to wrap `read`/`write`/`transform` functions into streams.\n\n\tnpm install stream-wrapper\n\nAll streams create are stream2 streams\n\n## Readable Stream\n\n``` js\nvar stream = require('stream-wrapper');\n\nvar rs = stream.readable(function(size) {\n\tthis.push(new Buffer('hello world'));\n});\n```\n\nIf you don't have a `read` function just omit it\n\n``` js\nvar rs = stream.readable();\nrs.push(new Buffer('hello world'));\n```\n\nThe Readable prototype is exposed through `stream.Readable`.\n\n## Writable Stream\n\n``` js\nvar stream = require('stream-wrapper');\n\nvar ws = stream.writable(function(chunk, enc, callback) {\n\tconsole.log('writing', chunk);\n\tcallback();\n});\n```\n\nThe Writable prototype is exposed through `stream.Writable`.\n\n## Duplex Stream\n\n``` js\nvar stream = require('stream-wrapper');\n\nvar ds = stream.duplex(function() {\n\t// read function\n\tthis.push(new Buffer('hello world'));\n}, function write(chunk, enc, callback) {\n\t// write function\n\tconsole.log('writing', chunk);\n\tcallback();\n});\n```\n\nThe Duplex prototype is exposed through `stream.Duplex`\n\n## Transform Stream\n\n``` js\nvar stream = require('stream-wrapper');\n\nvar ts = stream.transform(function(chunk, enc, callback) {\n\tthis.push(chunk);\n\tcallback();\n});\n```\n\nIf you want to add a flush function pass it as the second parameter\n\n``` js\nvar ts = stream.transform(function(chunk, enc, callback) {\n\t// transform function\n\tthis.push(chunk);\n\tcallback();\n}, function(callback) {\n\t// flush function\n\tconsole.log('now flushing...');\n\tcallback();\n});\n```\n\nThe Transform prototype is exposed through `stream.Transform`\n\n## Stream options\n\nIf you want to pass stream options (like `objectMode`) pass them as the first\nparameter to `readable`, `writable`, `duplex` or `transform`\n\n``` js\nvar rs = stream.readable({objectMode:true}, function() {\n\tthis.push({message:'i am an object'});\n});\n```\n\n## Stream defaults\n\nYou can change the default options for the stream by calling `defaults`\n\n``` js\n// all streams created have objectMode enabled\nstream = stream.defaults({objectMode:true});\n```\n\n## Stream.destroy\n\nAll streams have a `.destroy` method implemented per default that when called\nemits `close` and sets `stream.destroyed = true`.\n\n``` js\nvar rs = stream.readable();\n\nrs.on('close', function() {\n\t// rs.destroyed === true\n\tconsole.log('someone called destroy');\n});\n\nrs.destroy();\n```\n\n# License\n\nMIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mafintosh/stream-wrapper/issues"
  },
  "homepage": "https://github.com/mafintosh/stream-wrapper",
  "_id": "stream-wrapper@0.1.2",
  "dist": {
    "shasum": "116b6dc2a155e9f888e92b5d5c79ec0a85531995"
  },
  "_from": "stream-wrapper@",
  "_resolved": "https://registry.npmjs.org/stream-wrapper/-/stream-wrapper-0.1.2.tgz"
}
